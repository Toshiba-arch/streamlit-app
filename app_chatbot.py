import streamlit as st
from openai import OpenAI

def run():
    # T√≠tulo e descri√ß√£o da aplica√ß√£o
    st.title("üí¨ Chatbot com GPT e Mais Funcionalidades")
    st.write("Este √© um chatbot simples alimentado pelo modelo GPT-4. Al√©m disso, voc√™ pode gerar posts autom√°ticos, analisar imagens, gerar imagens, transcrever √°udio, converter texto em fala, transcrever fala para texto, gerar embeddings e mais!")

    # Obter a API Key dos secrets
    openai_api_key = st.secrets.get("openai_api_key")
    if not openai_api_key:
        st.error("API Key n√£o configurada. Por favor, adicione-a em **Settings > Secrets**.", icon="üõë")
        return

    # Criar cliente OpenAI
    client = OpenAI(api_key=openai_api_key)

    # Inicializar hist√≥rico de mensagens
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Sele√ß√£o de funcionalidades
    menu = st.selectbox(
        "Escolha a funcionalidade",
        ("Chatbot", "Gera√ß√£o de Imagens", "An√°lise de Imagens", "An√°lise de √Åudio", "Texto para Fala", "Fala para Texto", "Gerar Haiku", "Embeddings", "Baixar Hist√≥rico", "Sobre as Funcionalidades")
    )

    # Descri√ß√µes Explicativas sobre as funcionalidades
    if menu == "Sobre as Funcionalidades":
        st.write("### Descri√ß√£o das Funcionalidades")
        with st.expander("üí¨ Chatbot com GPT"):
            st.write("""
                Este chatbot √© alimentado pelo modelo GPT-4 e pode conversar com voc√™ sobre qualquer t√≥pico. 
                Ele gera respostas automatizadas com base nas suas mensagens, permitindo uma intera√ß√£o natural e fluida. 
                **Quando usar?**: Ideal para conversar sobre t√≥picos gerais, obter respostas r√°pidas ou at√© mesmo testar o poder do GPT.
            """)
        
        with st.expander("üñº Gera√ß√£o de Imagens"):
            st.write("""
                Utilize a gera√ß√£o de imagens para criar imagens a partir de descri√ß√µes de texto. O modelo DALL¬∑E da OpenAI transforma palavras em imagens visuais. 
                **Quando usar?**: √ötil quando voc√™ precisa de imagens criativas para apresenta√ß√µes, designs ou qualquer conte√∫do visual.
            """)
        
        with st.expander("üñº An√°lise de Imagens"):
            st.write("""
                A an√°lise de imagens permite que voc√™ envie uma URL de imagem para ser analisada. Embora o modelo n√£o ofere√ßa uma an√°lise detalhada 
                como um ser humano faria, ele pode fornecer insights e interpreta√ß√µes interessantes.
                **Quando usar?**: Ideal para examinar imagens e obter descri√ß√µes ou poss√≠veis informa√ß√µes sobre o conte√∫do visual.
            """)
        
        with st.expander("üéß An√°lise de √Åudio"):
            st.write("""
                Utilize a an√°lise de √°udio para transcrever arquivos de √°udio em texto. O modelo Whisper da OpenAI converte √°udio gravado em texto.
                **Quando usar?**: √ötil para transcrever grava√ß√µes de reuni√µes, entrevistas ou qualquer outro tipo de √°udio que precise ser convertido para texto.
            """)
        
        with st.expander("üîä Texto para Fala"):
            st.write("""
                Converta texto em fala com o modelo de Text-to-Speech da OpenAI. Voc√™ fornece um texto, e ele gera o √°udio correspondente.
                **Quando usar?**: Ideal para criar √°udios a partir de textos, como para podcasts, livros falados ou assistentes virtuais.
            """)
        
        with st.expander("üó£ Fala para Texto"):
            st.write("""
                A transcri√ß√£o de fala para texto converte √°udio gravado (MP3, WAV, M4A) em texto, utilizando o modelo Whisper.
                **Quando usar?**: √ötil quando voc√™ tem grava√ß√µes de voz e precisa transcrever para texto, como transcri√ß√µes de entrevistas ou reuni√µes.
            """)
        
        with st.expander("üìú Gerador de Haiku"):
            st.write("""
                O gerador de Haiku cria poemas curtos e sim√©tricos baseados em um tema que voc√™ fornece. Haikus s√£o uma forma po√©tica tradicional japonesa.
                **Quando usar?**: Para fins criativos, como escrever poesias sobre temas espec√≠ficos, ou at√© mesmo para se inspirar.
            """)
        
        with st.expander("üî¢ Embeddings"):
            st.write("""
                Gera√ß√£o de Embeddings converte textos em vetores num√©ricos, que s√£o √∫teis para compara√ß√£o sem√¢ntica e outras aplica√ß√µes de aprendizado de m√°quina.
                **Quando usar?**: Essencial para criar sistemas de busca, recomenda√ß√µes ou qualquer aplica√ß√£o que precise comparar a semelhan√ßa de textos.
            """)
        
        with st.expander("üíæ Baixar Hist√≥rico"):
            st.write("""
                Baixe o hist√≥rico das intera√ß√µes do chatbot em um arquivo de texto. √ötil se voc√™ precisar manter um registro ou analisar as conversas mais tarde.
                **Quando usar?**: Quando voc√™ deseja salvar ou revisar o hist√≥rico de suas intera√ß√µes com o chatbot.
            """)

    # Fun√ß√µes do Chatbot
    elif menu == "Chatbot":
        st.write("### üí¨ Chatbot com GPT")
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        prompt = st.chat_input("Digite sua mensagem:")
        if prompt:
            if len(prompt) > 500:
                st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
            else:
                st.session_state.messages.append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)

                completion = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages]
                )

                response = completion.choices[0].message.content
                with st.chat_message("assistant"):
                    st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

        # Bot√£o para limpar o hist√≥rico
        if st.button("üßπ Limpar hist√≥rico"):
            st.session_state.messages = []
            st.info("Hist√≥rico de mensagens limpo!")

    # Fun√ß√£o de Gera√ß√£o de Imagens
    elif menu == "Gera√ß√£o de Imagens":
        st.write("### Gera√ß√£o de Imagens com DALL¬∑E")
        image_description = st.text_input("Descreva a imagem que voc√™ deseja gerar:")
        if st.button("Gerar Imagem") and image_description:
            try:
                # Chamada √† API da OpenAI para gerar a imagem com base na descri√ß√£o fornecida
                image_response = client.images.create(
                    prompt=image_description,
                    n=1,  # N√∫mero de imagens a serem geradas
                    size="1024x1024"  # Tamanho da imagem gerada
                )
                image_url = image_response['data'][0]['url']
                st.image(image_url, caption="Imagem gerada", use_column_width=True)
            except Exception as e:
                st.error(f"Erro ao gerar imagem: {e}")

    # Fun√ß√£o de An√°lise de Imagens
    elif menu == "An√°lise de Imagens":
        st.write("### An√°lise de Imagens com GPT")
        image_url = st.text_input("Insira a URL da imagem para an√°lise:")
        if image_url:
            st.image(image_url, caption="Imagem carregada")
            st.write("Aqui voc√™ pode adicionar a l√≥gica para analisar a imagem.")

    # Fun√ß√£o de An√°lise de √Åudio
    elif menu == "An√°lise de √Åudio":
        st.write("### An√°lise de √Åudio com Whisper")
        audio_file = st.file_uploader("Carregue um arquivo de √°udio (MP3, WAV, M4A) para transcri√ß√£o:", type=["mp3", "wav", "m4a"])
        if audio_file:
            try:
                audio_response = client.audio.transcribe(model="whisper-1", file=audio_file)
                st.write("Texto transcrito do √°udio:")
                st.write(audio_response["text"])
            except Exception as e:
                st.error(f"Erro ao transcrever √°udio: {e}")

    # Fun√ß√£o de Texto para Fala
    elif menu == "Texto para Fala":
        st.write("### Texto para Fala com OpenAI")
        text_input = st.text_area("Digite o texto que voc√™ deseja converter em fala:")
        if st.button("Converter Texto em Fala") and text_input:
            try:
                audio_response = client.audio.create(
                    model="text-to-speech",
                    input={"text": text_input}
                )
                audio_url = audio_response['data'][0]['url']
                st.audio(audio_url, format='audio/mp3')
            except Exception as e:
                st.error(f"Erro ao converter texto em fala: {e}")

    # Fun√ß√£o de Fala para Texto
    elif menu == "Fala para Texto":
        st.write("### Fala para Texto com Whisper")
        audio_file = st.file_uploader("Carregue um arquivo de √°udio (MP3, WAV, M4A) para transcri√ß√£o:", type=["mp3", "wav", "m4a"])
        if audio_file:
            try:
                audio_response = client.audio.transcribe(model="whisper-1", file=audio_file)
                st.write("Texto transcrito do √°udio:")
                st.write(audio_response["text"])
            except Exception as e:
                st.error(f"Erro ao transcrever √°udio: {e}")

    # Fun√ß√£o de Gerar Haiku
    elif menu == "Gerar Haiku":
        st.write("### Gerador de Haiku")
        haiku_theme = st.text_input("Tema do Haiku (opcional):", placeholder="Por exemplo: tecnologia, natureza, etc.")
        if st.button("üìú Gerar Haiku"):
            haiku_prompt = f"Escreva um haiku sobre {haiku_theme}" if haiku_theme else "Escreva um haiku sobre IA"
            haiku_completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": haiku_prompt}]
            )
            haiku = haiku_completion.choices[0].message.content
            st.markdown(f"**Haiku:**\n\n{haiku}")

    # Fun√ß√£o de Embeddings
    elif menu == "Embeddings":
        st.write("### Gera√ß√£o de Embeddings")
        text_input = st.text_area("Digite o texto para gerar o embedding:")
        if st.button("Gerar Embedding") and text_input:
            try:
                embedding_response = client.embeddings.create(model="text-embedding-ada-002", input=[text_input])
                st.write("Embedding gerado:", embedding_response['data'][0]['embedding'])
            except Exception as e:
                st.error(f"Erro ao gerar embedding: {e}")

    # Fun√ß√£o para Baixar o Hist√≥rico
    elif menu == "Baixar Hist√≥rico":
        if st.download_button(
            "üíæ Baixar hist√≥rico do chat",
            data="\n".join([f"{msg['role'].capitalize()}: {msg['content']}" for msg in st.session_state.messages]),
            file_name="chat_history.txt",
            mime="text/plain"
        ):
            st.success("Hist√≥rico baixado com sucesso!")

# Executar a aplica√ß√£o
if __name__ == "__main__":
    run()
