import streamlit as st
from openai import OpenAI
import openai
import time

# Fun√ß√£o para inicializar o cliente OpenAI
def initialize_openai_client():
    openai_api_key = st.secrets.get("openai_api_key")
    if not openai_api_key:
        st.error("API Key n√£o configurada. Por favor, adicione-a em **Settings > Secrets**.", icon="üõë")
        return None
    return openai

# Fun√ß√£o para exibir o t√≠tulo da aplica√ß√£o
def show_app_title():
    st.title("üí¨ Chatbot Avan√ßado com GPT")
    st.write("Este chatbot usa funcionalidades avan√ßadas, como Sa√≠das Estruturadas, Sa√≠das Previs√≠veis e Chamadas de Fun√ß√µes!")

# Fun√ß√£o para exibir o Chatbot
def show_chatbot(client):
    st.write("### üí¨ Chatbot com GPT")
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    prompt = st.chat_input("Digite sua mensagem:")
    if prompt:
        if len(prompt) > 500:
            st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            completion = client.Completion.create(
                model="gpt-4",
                prompt=prompt,
                max_tokens=150,
                temperature=0.7
            )
            response = completion.choices[0].text.strip()
            with st.chat_message("assistant"):
                st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    if st.button("üßπ Limpar hist√≥rico"):
        st.session_state.messages = []
        st.info("Hist√≥rico de mensagens limpo!")

# Fun√ß√£o para exibir o Chatbot com Reasoning
def show_chatbot_with_reasoning(client):
    st.write("### üí¨ Chatbot com GPT (Racioc√≠nio Detalhado)")
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    prompt = st.chat_input("Digite sua mensagem:")
    if prompt:
        if len(prompt) > 500:
            st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            reasoning_prompt = f"Explique detalhadamente a solu√ß√£o para: {prompt}"

            completion = client.Completion.create(
                model="gpt-4",
                prompt=reasoning_prompt,
                max_tokens=150,
                temperature=0.7
            )
            response = completion.choices[0].text.strip()
            with st.chat_message("assistant"):
                st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    if st.button("üßπ Limpar hist√≥rico"):
        st.session_state.messages = []
        st.info("Hist√≥rico de mensagens limpo!")

# Fun√ß√£o para exibir o Chatbot com Sa√≠das Estruturadas
def show_structured_output_chatbot(client):
    st.write("### üí¨ Chatbot com Sa√≠das Estruturadas")
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    prompt = st.chat_input("Digite sua mensagem:")
    if prompt:
        if len(prompt) > 500:
            st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            response = get_structured_response(prompt)

            with st.chat_message("assistant"):
                st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    if st.button("üßπ Limpar hist√≥rico"):
        st.session_state.messages = []
        st.info("Hist√≥rico de mensagens limpo!")

# Fun√ß√£o para gerar uma resposta estruturada
def get_structured_response(prompt):
    response = openai.Completion.create(
        model="gpt-4",
        prompt=f"Estruture a resposta da seguinte forma: {{'informa√ß√£o': '{prompt}'}}",
        max_tokens=150,
        temperature=0.7
    )
    return response['choices'][0]['text'].strip()

# Fun√ß√£o para exibir o Chatbot com Sa√≠das Previs√≠veis
def show_predicted_output_chatbot(client):
    st.write("### üí¨ Chatbot com Sa√≠das Previs√≠veis")
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    prompt = st.chat_input("Digite sua mensagem:")
    if prompt:
        if len(prompt) > 500:
            st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            response = get_predicted_output(prompt)

            with st.chat_message("assistant"):
                st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    if st.button("üßπ Limpar hist√≥rico"):
        st.session_state.messages = []
        st.info("Hist√≥rico de mensagens limpo!")

# Fun√ß√£o para gerar uma sa√≠da previs√≠vel
def get_predicted_output(prompt):
    response = openai.Completion.create(
        model="gpt-4",
        prompt=prompt,
        max_tokens=100,
        temperature=0.3
    )
    return response.choices[0].text.strip()

# Fun√ß√£o para exibir o Chatbot com Chamadas de Fun√ß√µes
def show_function_calling_chatbot(client):
    st.write("### üí¨ Chatbot com Chamadas de Fun√ß√µes")
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    prompt = st.chat_input("Digite sua mensagem:")
    if prompt:
        if len(prompt) > 500:
            st.warning("Sua mensagem √© muito longa. Por favor, seja mais breve!")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            response = process_function_call(prompt)

            with st.chat_message("assistant"):
                st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    if st.button("üßπ Limpar hist√≥rico"):
        st.session_state.messages = []
        st.info("Hist√≥rico de mensagens limpo!")

# Fun√ß√£o para processar uma entrada e chamar a fun√ß√£o apropriada
def process_function_call(prompt):
    # Exemplo de fun√ß√£o: Previs√£o do tempo
    if "previs√£o do tempo" in prompt.lower():
        return get_weather_forecast()
    else:
        return "N√£o entendi sua solicita√ß√£o. Pode reformular?"

# Fun√ß√£o fict√≠cia para obter previs√£o do tempo
def get_weather_forecast():
    return "A previs√£o do tempo para hoje √© ensolarada com temperaturas em torno de 25¬∞C."

# Fun√ß√£o principal para exibir a interface
def run():
    show_app_title()

    # Inicializa√ß√£o do cliente OpenAI
    client = initialize_openai_client()
    if not client:
        return  # Se a API key n√£o estiver configurada, interrompe a execu√ß√£o

    # Menu de funcionalidades
    feature = st.selectbox(
        "Escolha a funcionalidade:",
        ("Chatbot", "Chatbot com Reasoning", "Chatbot com Sa√≠das Estruturadas", "Chatbot com Sa√≠das Previs√≠veis", "Chatbot com Chamadas de Fun√ß√µes",
         "An√°lise de Imagens", "Gerar Haiku", "Texto para Imagem", "√Åudio para Texto", "Texto para Fala", "Fala para Texto", "Embeddings")
    )

    # Exibir a funcionalidade selecionada
    if feature == "Chatbot":
        show_chatbot(client)
    elif feature == "Chatbot com Reasoning":
        show_chatbot_with_reasoning(client)
    elif feature == "Chatbot com Sa√≠das Estruturadas":
        show_structured_output_chatbot(client)
    elif feature == "Chatbot com Sa√≠das Previs√≠veis":
        show_predicted_output_chatbot(client)
    elif feature == "Chatbot com Chamadas de Fun√ß√µes":
        show_function_calling_chatbot(client)
    elif feature == "An√°lise de Imagens":
        show_image_analysis(client)
    elif feature == "Gerar Haiku":
        show_haiku_generation(client)
    elif feature == "Texto para Imagem":
        show_text_to_image(client)
    elif feature == "√Åudio para Texto":
        show_audio_to_text(client)
    elif feature == "Texto para Fala":
        show_text_to_speech(client)
    elif feature == "Fala para Texto":
        show_speech_to_text(client)
    elif feature == "Embeddings":
        show_embeddings(client)

# Rodar a aplica√ß√£o
if __name__ == "__main__":
    run()

